#set($packages = $array.createArray())
#set($void = $array.addCollection($packages, $Package))
#set($void = $array.addCollection($packages, $SmartPackage))
#foreach ($package in $sorter.sort($packages, "qualifiedName"))
#set($qualifiedName = $package.qualifiedName)
#set ($classList = $array.createArray())
#foreach ($element in $report.getOwnedElementsIncludingAdditional($package, true))
#if ($element.elementType == "class")
#set ($void = $classList.add($element))
#end
#end
#end
## BEGIN BUSINESS LOGIC **
#foreach ($class in $sorter.sort($classList))
#set($relationList = $report.getRelationship($class))
#set($xPathExprs = $array.createArray())
#set($forwardLookups = $array.createArray())
#foreach($rel in $relationList)
#set($clientClass = $report.getClientElement($rel))
#set($supplierClass = $report.getSupplierElement($rel))
## ONLY WANT ASSOCIATIONS **
#if($rel.humanType == 'Association')
## RESET FOR NEXT IERATION **
#set($clientRoleName = "")
#set($clientIsNav = false)
#set($supplierIsNav = false)
#set($clientAggregation = false)
#set($plural = false)
#set($selfRef = false)
## RUN BOTH SIDES, GATHERING THE DATA WE NEED **
#foreach($relEnd in $rel.memberEnd)
## START CLIENT SIDE CHECKS **
## IF CLIENT REL END ISN'T OWNED, IT ISN'T NAVIGABLE AND WE DON'T CARE ANYWAY **
#if($relEnd.owner == $clientClass)
#set($clientRoleName = $relEnd.name)
#if($relEnd.aggregation == "composite")#set($clientAggregation = true)#end
## CHECK IF WE NEED TO PLURALIZE ROLE NAME SUFFIXES **
#if($relEnd.upperValue.value == -1 || $relEnd.upperValue.value > 1)#set($plural = true)#end
#end
## END CLIENT SIDE **
## CHECK IF RELATIONSHIP IS SELF REFERENTIAL **
#if($supplierClass == $clientClass)#set($selfRef = true)#end
## CHECK IF WE HAVE A NAVIGABLE END FROM OTHER SIDE **
#if($clientClass != $class || $selfRef)#set($clientIsNav = true)#end
#if($supplierClass != $class || $selfRef)#set($supplierIsNav = true)#end
#end
## END RELS **
## LOGIC FOR REVERSE LOOKUP **
#if($plural)#set($suffix = "Ids")#else#set($suffix = "Id")#end
#set($refId = $clientRoleName + $suffix)
#if(!$clientAggregation && $clientIsNav)
#set($void = $xPathExprs.add("name() = '$refId' and .. instance of element(*, err:$clientClass.name)"))
#end
## LOGIC FOR FORWARD LOOKUP **
#if(!$clientAggregation && $supplierIsNav)
#set($void = $forwardLookups.add($refId))
#end
#end
#end
## ONLY OUTPUT WHEN WE HAVE AT LEAST ONE EXPR **
#if(!$xPathExprs.isEmpty() || !$forwardLookups.isEmpty())
<sch:rule context="element(*, err:$class.name)">
#if(!$xPathExprs.isEmpty())
    <sch:assert test="count(idref(current()/@ObjectId)[#foreach($expr in $xPathExprs)($expr)#if(!$foreach.last) or #end#end]) > 0">$path must have refereant from $xPathExprs</sch:assert>
#end
#foreach($forwardLookup in $forwardLookups)
    <sch:assert test="not(id(err:$forwardLookup)[not(. instance of element(*, err:$supplierClass.name))])">$forwardLookup must point to an element of type $supplierClass.name</sch:assert>
#end
</sch:rule>
#end
#end